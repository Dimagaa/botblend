name: Deploy to ECS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  AWS_ASSUME_ROLE: arn:aws:iam::410123344539:role/github-book-store-repository
  ECR_REPOSITORY: botblend
  ECS_SERVICE: botblend
  ECS_CLUSTER: BotBlendCluster
  ECS_TASK_DEFINITION: .github/workflows/task-definition.json
  CONTAINER_NAME: botblend

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven

      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots verify

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE}}
          role-session-name: Github_push_session
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build and push image to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REGISTRY_ALIAS: w5z6u3w9
          REPOSITORY: online-book-store
          IMAGE_TAG: latest
        run: |
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG

          - name: Fill in the new image ID in the Amazon ECS task definition
              id: task-def
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                task-definition: task-definition.json
                container-name: my-container
                image: ${{ steps.build-image.outputs.image }}

              - name: Deploy Amazon ECS task definition
                uses: aws-actions/amazon-ecs-deploy-task-definition@v1
                with:
                  task-definition: ${{ steps.task-def.outputs.task-definition }}
                  service: my-service
                  cluster: my-cluster
                  wait-for-service-stability: true
